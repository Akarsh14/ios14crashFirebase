{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Module wise screens\
\
Login Module\
\
-> LoginViewController:- This class is used to show login screen and other login options like Login with Fb, truecCaller, phone number login.\
-> U2opiaNumberLogin:- This class contains the logic for performing login with fb or truecaller or phone number login. This class is the initiator of processes based on the user\'92s actions.\
-> NativeOTPScreenViewController:- This class is initiated when phone number login happens. This screen allows user to provide there phone number to receive OTP. Once user receives OTP then he is sent to next screen.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 -> OTPSentViewController:-  This screen allows user to enter correct OTP. Once the user enters OTP then verification call is made and user then lands on login page to move to next screen.\
-> LoginLoadingViewController:- This screen is used to ask user for notification and location permission. Based on user\'92s action call to login is made and once login is successful then if its fb login then user lands on onboarding screens otherwise it lands on registration screens.\
-> LoginErrorFeedbackViewController:- This screen is shown either when user has loggedin through Facebook and error occurs or user has inputed age less than or equal to 18.\
\
Registration Module\
\
-> OnBoardingNameViewController:- This screen allows user to provide with his first and last name. Once user provides the same he moves to age screen.\
->  OnBoardingAgeViewController:- This screen allows user to provide his date of birth. If user is above 18 then he moves to gender screen otherwise we show a blocker screen to him as the app is not for 18 and below.\
-> OnBoardingGenderViewController:- This screen allows user to provide his gender as male or female. Once user provides gender then registration call is made and then user lands on onboarding screens.\
\
Onboarding Module\
\
-> WizardTagsViewController:- This screen allows user to select multiple tags which are provided by server.\
-> FindTagViewController:- This screen allows user to find a tag by tag name.\
-> WizardPhotoViewController:- This screen allows user to select upto 9 photos. User can upload photos from gallery or camera and then send to server for checking if it has been approved or rejected. User can also drag and drop any photo for rearranging. There are also few logics for photos like user can only replace an approved photo with another approved photo. If user clicks on any photo then if its an approved photo then user is shown with an option of replacing photo with another photo. If the photo is rejected then if user taps on photo then it is removed. If user clicks on empty cell then user is directly asked to upload photo.\
-> AboutMeScreenViewController:- This screen allows user to enter something about himself as user\'92s introduction.\
-> SearchLocationViewController:- If the user has not allowed location in first screen then we show this screen to user to enter his location manually. Once the location has been provided then onboardingDone call is made and then user is shown his profile to review what he has filled during onboarding.\
FemaleTutorialViewController:- This screen is only shown for female users as a tutorial of what all they can do inside app.\
\
Discover Module\
\
-> DiscoverViewController:- This is the main class which is used to show profiles to user. This class defines deck of profiles and profile behind it. We have used a third party library called Koloda for deck of cards shown as profiles. Discover container shows profiles and other brand cards provided by server. User can like dislike or send crush to profiles. User can also tap or swipe up on any profile to view his details. User can also swipe right for like and swift left for dislike. It also contains a feature of out of likes if user has exhausted his likes of the day. \
-> ProfilePresentAnimator:- This class is used for providing animation while moving from discover to profile detail.\
-> ProfilePopAnimator:- This class is used for providing animation while coming back to discover from profile detail.\
-> DiscoverProfileCollection:- This is the modal class for discover which manages data which is shown in discover screen. This class contains functions which is used for manipulating data in discover. This class uses observable pattern that whenever data is updated in the class discover screen is notified directly and data is updated.\
-> DiscoverEmptyDeck:- This class is used to create view for discover empty screen.\
-> ProfileDeckView:- This class is used to create view for user profile shown in deck of discover.\
-> ProfileCardModel:- This is the modal class for user profile.\
-> ProfileDeckDetailViewController:- This screen shows user profile details. User can like dislike and send crush to profile.\
-> BrandCardDeck:- This class is used to create view for brand card provided by server.\
-> BrandCardModel:- This is the modal class for brand card.\
-> BrandCardViewController:- This screen is shown when user clicks on brand card as detail of brand card. \
-> NewTagSearchViewController:- This screen shows profiles based on the tag search happened.\
\
Me Section Module\
\
-> AboutMeViewController:- This screen displays options like profile picture of user and listing which contains:- LikedMe, Visitor, Skipped Profiles, LikedByMe, Crush received and other sections.\
-> LikedMeViewController:- This class is used for displaying likedme profiles from local database. User can like, dislike or send crush to profiles shown. The profiles shown have multiple variants based on Wooplus and boost purchased by user.\
-> VisitorViewController:- This class is used for displaying visitors from local database. User can like, dislike or send crush to profiles shown. The profiles shown have multiple variants based on Wooplus and boost purchased by user.\
-> SkippedProfileViewController:- This class is used for displaying skipped profiles from local database. User can like, dislike or send crush to profiles shown. The profiles shown have multiple variants based on Wooplus and boost purchased by user.\
-> CrushPanelViewController:- This class is used for displaying crushes received from local database. User can like, dislike to profiles shown.\
-> MeProfileDeckView:- This screen creates view for profile shown in all sections likedme, visitor, likedbyme, skipped profiles.\
\
Matchbox Module\
\
-> MatchBoxViewController:- This screen displays all the matches of user coming from local database. If user does not have any matches then he is shown with empty matchbox screen allowing user to discover more people or buy Wooplus to make matches from likedme section. User can chat with any user by tapping on match tile. User can swipe to delete match.\
-> NewChatViewController:- This class allows user to chat with matched profile. Third party applozic is used for chatting which internally uses MQTT protocol. Chats are fetched from local database. User can send text or image to matched user. User can also call another user if they are on same version and if initiated user is female. We are using third party Agora for calling feature.\
\
Side Menu Module\
\
-> SideDrawerViewController:- This screen is presented from the right side of the screen and has options like Me section, MyPreferences, MyPurchases, Invite, Feedback, ReferFriend, Faq, TnC, Guidelines, FemaleTutorial and WooTrueStory.\
->  FemaleTutorialViewController:- This screen shows tutorial for female for things which she can do in app.\
-> MyPreferencesViewController:- This screen has many options related to settings of app like seeing his selected location, changing distance, age, gender etc.\
-> WriteAnswerViewController:- This class is used for sending feedback.\
-> WebViewController:- This class is used for faq, tnc and guidelines.\
-> EditProfileViewController:- This class allows user to edit his profile like photos, personal quote, tags, relationship and lifestyle, woo questions etc.\
\
Wizard Module\
\
-> PerformanceAnalysisViewController and WizardScreensCalculator:- This class contains the logic of showing all the screens in wizard and also there order of showing.\
-> WizardQnAViewController:- This class allows user to add upto three qna to his profile.\
-> WizardPhoneVerifyController:- This class allows user to add his phone number for verification.\
-> WizardTagsViewController:- This class allows user to add or edit his tags.\
-> WizardCompleteView:- This screen is when user has completed the process.\
-> WizardWorkViewController:- This screen allows user to add his work related details.\
-> WizardHeightViewController:- This screen allows user to provide his height.\
-> WizardGlobalCitizenViewController:- This screen allows user to provide his relationship and lifestyle.\
\
Other important classes:- \
\
-> APIQueue:- This is the base class for making network call. We are using third party AFNetworking.\
-> WooAPIClass folder contains all the classes related to api\'92s being called in app.\
-> WooScreenManager:- This class manages state fo woo screens around the app. This class manages the state of app.\
-> HomeViewController:- This is the home controller which is used to present and controllers around the app.\
-> PurchasePopup:- This class manages all the purchases states and then save them into respective models. I.e WooPlus, Crush, Boost etc.\
-> InAppPurchaseManager:- This class manages inapp purchase.\
-> CoreDataModels folder contains all the models related to the entity in database.}